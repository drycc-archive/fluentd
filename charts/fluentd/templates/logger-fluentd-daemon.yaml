{{ $nsqdNodeCount := .Values.nsqd.replicas | int }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: drycc-logger-fluentd
  labels:
    heritage: drycc
  annotations:
    component.drycc.cc/version: {{ .Values.imageTag }}
spec:
  {{- if ge .Capabilities.KubeVersion.Minor "6" }}
  updateStrategy:
    type: RollingUpdate
  {{- end }}
  selector:
    matchLabels:
      app: drycc-logger-fluentd
      heritage: drycc
  template:
    metadata:
      name: drycc-logger-fluentd
      labels:
        heritage: drycc
        app: drycc-logger-fluentd
    spec:
      serviceAccount: drycc-logger-fluentd
      initContainers:
      - name: drycc-logger-fluentd-init
        image: docker.io/drycc/python-dev:latest
        imagePullPolicy: {{.Values.imagePullPolicy}}
        command:
          - netcat
          - -v
          - -a
          - $(DRYCC_NSQD_ADDRS)
        env:
          - name: DRYCC_NSQD_ADDRS
            value: "{{range $i := until $nsqdNodeCount}}drycc-nsqd-{{$i}}.drycc-nsqd.{{ $.Release.Namespace }}.svc.{{$.Values.global.clusterDomain}}:{{$.Values.nsqd.tcpPort}}{{if lt (add 1 $i) $nsqdNodeCount}},{{end}}{{end}}"
      containers:
      - name: drycc-logger-fluentd
        image: {{.Values.imageRegistry}}/{{.Values.imageOrg}}/fluentd:{{.Values.imageTag}}
        imagePullPolicy: {{.Values.imagePullPolicy}}
{{- if or (.Values.limitsCpu) (.Values.limitsMemory)}}
        resources:
          limits:
{{- if (.Values.limitsCpu) }}
            cpu: {{.Values.limitsCpu}}
{{- end}}
{{- if (.Values.limitsMemory) }}
            memory: {{.Values.limitsMemory}}
{{- end}}
{{- end}}
        env:
          {{- if .Values.sources.startScript }}
          - name: "CAPTURE_START_SCRIPT"
            value: {{.Values.sources.startScript | quote }}
          {{- end }}
          {{- if .Values.sources.docker }}
          - name: "CAPTURE_DOCKER_LOG"
            value: {{.Values.sources.docker | quote }}
          {{- end }}
          {{- if .Values.sources.etcd }}
          - name: "CAPTURE_ETCD_LOG"
            value: {{.Values.sources.etcd | quote }}
          {{- end }}
          {{- if .Values.sources.kubelet }}
          - name: "CAPTURE_KUBELET_LOG"
            value: {{.Values.sources.kubelet | quote }}
          {{- end }}
          {{- if .Values.sources.kubeApi }}
          - name: "CAPTURE_KUBE_API_LOG"
            value: {{.Values.sources.kubeApi | quote }}
          {{- end }}
          {{- if .Values.sources.controller }}
          - name: "CAPTURE_CONTROLLER_LOG"
            value: {{.Values.sources.controller | quote }}
          {{- end }}
          {{- if .Values.sources.scheduler }}
          - name: "CAPTURE_SCHEDULER_LOG"
            value: {{.Values.sources.scheduler | quote }}
          {{- end }}
          {{- if .Values.output.disableDrycc }}
          - name: "DISABLE_DRYCC_OUTPUT"
            value: {{.Values.output.disableDrycc | quote }}
          {{- end }}
          {{- if .Values.boot.installBuildTools }}
          - name: "INSTALL_BUILD_TOOLS"
            value: {{.Values.boot.installBuildTools | quote }}
          {{- end }}
          {{- if and (.Values.syslog.host) (.Values.syslog.port)}}
          - name: "SYSLOG_HOST"
            value: {{.Values.syslog.host | quote }}
          - name: "SYSLOG_PORT"
            value: {{.Values.syslog.port | quote }}
          {{- end }}
          {{- range $key, $value := .Values.daemonEnvironment }}
          - name: {{ $key }}
            value: {{ $value | quote }}
          {{- end }}
          - name: DRYCC_NSQD_ADDRS
            value: "{{range $i := until $nsqdNodeCount}}drycc-nsqd-{{$i}}.drycc-nsqd.{{ $.Release.Namespace }}.svc.{{$.Values.global.clusterDomain}}:4150{{if lt (add 1 $i) $nsqdNodeCount}},{{end}}{{end}}"
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
